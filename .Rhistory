q()
library(quanteda)
library(pgirmess)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelCategory <- as.factor(comments$channelCategory)
badWords <- readLines("badwords.txt")
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelCategory,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=3),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853", "#ffab00", "#f50057", "#2979ff"),
family="Lato Medium",
max.words=250,
title.size=1.5)
cTable.profane <- table(comments[,c("channelCategory", "is_profane")])
cTable.polarity <- table(comments[,c("channelCategory", "polarity")])
prop.table(cTable.profane, 1)
prop.table(cTable.polarity, 1)
kruskal.test(word_cnt~channelCategory, data=comments)
kruskalmc(word_cnt~channelCategory, data=comments)
chisq.test(cTable.profane)
chisq.test(cTable.polarity)
chisq.post.hoc(cTable.profane, test=chisq.test)
chisq.post.hoc(cTable.polarity, test=chisq.test)
clear()
library(quanteda)
library(pgirmess)
install.packages(c("foreign", "rmarkdown"))
library("pgirmess", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:pgirmess", unload=TRUE)
install.packages("pgirmess")
library("pgirmess", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("rgdal")
library("pgirmess", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages('rgdal', type="source")
library("pgirmess", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(quanteda)
library(pgirmess)
library(rgdal)
remove.packages("rgdal")
install.packages("rgdal")
library(rgdal)
remove.packages("pgirmess")
remove.packages("rgdal")
install.packages("pgirmess")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:rgdal", unload=TRUE)
library(pgirmess)
remove.packages("rgdal")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("rgdal")
install.packages('rgdal', type = "source", configure.args=c('--with-proj-include=/usr/local/include','--with-proj-lib=/usr/local/lib'))
install.packages("rgdal", type = "source", configure.args = c("--with-proj-include=/usr/local/include", "--with-proj-lib=/usr/local/lib"))
install.packages("rgdal")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(rgeos)
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos = "http://R-Forge.R-project.org", type = "source")
library(rgeos)
remove.packages("rgdal")
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelCategory <- as.factor(comments$channelCategory)
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$videoTitle <- as.factor(comments$videoTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$videoTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=3),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853", "#ffab00", "#f50057", "#2979ff"),
family="Lato Medium",
max.words=250,
title.size=1.5)
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=3),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853", "#ffab00", "#f50057", "#2979ff"),
family="Lato Medium",
max.words=250,
title.size=1.5)
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=1),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853"),
family="Lato Medium",
max.words=250,
title.size=1.5)
cTable.profane <- table(comments[,c("channelTitle", "is_profane")])
cTable.polarity <- table(comments[,c("channelTitle", "polarity")])
prop.table(cTable.profane, 1)
prop.table(cTable.polarity, 1)
kruskal.test(word_cnt~channelTitle, data=comments)
kruskalmc(word_cnt~channelTitle, data=comments)
chisq.test(cTable.profane)
chisq.test(cTable.polarity)
chisq.post.hoc(cTable.profane, test=chisq.test)
chisq.post.hoc(cTable.polarity, test=chisq.test)
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
read.csv("./comments_UC-lHJZR3Gqxm24_Vd_AJ5Yw.csv", stringsAsFactors = FALSE),
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_PewDiePie.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
library(quanteda)
library(fifer)
library(syuzhet)
comments <- merge(
merge(
read.csv("./comments_UC-lHJZR3Gqxm24_Vd_AJ5Yw.csv", stringsAsFactors = FALSE),
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE)
),
merge(
read.csv("./videos_PewDiePie.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=1),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853"),
family="Lato Medium",
max.words=250,
title.size=1.5)
comments <- merge(
merge(
read.csv("./comments_UC-lHJZR3Gqxm24_Vd_AJ5Yw.csv", stringsAsFactors = FALSE),
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE)
),
merge(
read.csv("./videos_PewDiePie.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
stopwords("english")
comments <- merge(
merge(
read.csv("./comments_UC-lHJZR3Gqxm24_Vd_AJ5Yw.csv", stringsAsFactors = FALSE),
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE)
),
merge(
read.csv("./videos_PewDiePie.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
comments <- merge(
merge(
read.csv("./comments_UC-lHJZR3Gqxm24_Vd_AJ5Yw.csv", stringsAsFactors = FALSE),
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE)
),
merge(
read.csv("./videos_PewDiePie.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
)
comments$channelTitle <- as.factor(comments$channelTitle)
View(comments)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
kruskalmc(word_cnt~videoTitle, data=comments)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=1),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853"),
family="Lato Medium",
max.words=250,
title.size=1.5)
cTable.profane <- table(comments[,c("channelTitle", "is_profane")])
cTable.polarity <- table(comments[,c("channelTitle", "polarity")])
prop.table(cTable.profane, 1)
prop.table(cTable.polarity, 1)
kruskal.test(word_cnt~videoTitle, data=comments)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
comments$videoTitle <- as.factor(comments$videoTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
set.seed(12345)
textplot_wordcloud(dfm_select(commentsDfm, min_nchar=1),
comparison=TRUE,
random.order=FALSE,
colors = c("#00c853"),
family="Lato Medium",
max.words=250,
title.size=1.5)
cTable.profane <- table(comments[,c("channelTitle", "is_profane")])
cTable.polarity <- table(comments[,c("channelTitle", "polarity")])
prop.table(cTable.profane, 1)
prop.table(cTable.polarity, 1)
kruskal.test(word_cnt~videoTitle, data=comments)
kruskalmc(word_cnt~videoTitle, data=comments)
chisq.test(cTable.profane)
chisq.test(cTable.polarity)
chisq.post.hoc(cTable.profane, test=chisq.test)
chisq.post.hoc(cTable.polarity, test=chisq.test)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
comments$videoTitle <- as.factor(comments$videoTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
cTable.profane <- table(comments[,c("videoTitle", "is_profane")])
cTable.polarity <- table(comments[,c("videoTitle", "polarity")])
prop.table(cTable.profane, 1)
prop.table(cTable.polarity, 1)
kruskal.test(word_cnt~videoTitle, data=comments)
kruskalmc(word_cnt~videoTitle, data=comments)
chisq.test(cTable.profane)
chisq.test(cTable.polarity)
chisq.post.hoc(cTable.profane, test=chisq.test)
chisq.post.hoc(cTable.polarity, test=chisq.test)
comments <- merge(
read.csv("./comments_UCtinbF-Q-fVthA0qrFQTgXQ.csv", stringsAsFactors=FALSE),
read.csv("./videos_CaseyNeistat.csv", stringsAsFactors=FALSE)
)
comments$channelTitle <- as.factor(comments$channelTitle)
comments$videoTitle <- as.factor(comments$videoTitle)
badWords <- readLines("badwords.txt")
names <- readLines("names.txt")
toks <- tokenize(tolower(comments$text),
removeNumbers = TRUE,
removePunct = TRUE,
removeSeparators = TRUE,
removeSymbols = TRUE,
removeHyphens = TRUE,
removeURL = TRUE)
comments$word_cnt <- ntoken(toks)
toks[1]
toksProfane <- selectFeatures(toks, badWords, selection = "keep")
comments$is_profane <- ifelse(ntoken(toksProfane)>0, 1, 0)
comments$sentimentScore <- get_sentiment(comments$text, method="bing")
comments$polarity <- ifelse(comments$sentimentScore>0, "positive",
ifelse(comments$sentimentScore<0, "negative", "neutral"))
commentsDfm <- dfm(toks, groups = comments$channelTitle,
remove = c(stopwords("english"), names))
